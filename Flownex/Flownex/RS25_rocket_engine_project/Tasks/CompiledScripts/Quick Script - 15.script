//script using directives
//css_ref IPS.Core.dll;
//css_ref IPS.PluginInterface.dll;
//css_ref IPS.Units.dll;
//css_ref IPS.Utilities.CSharp.dll;
//css_ref Flownex.dll;

using System;
using System.Windows.Forms;
using IPS.Properties;
using IPS.Scripting;
using Flownex.Components;
using Flownex.DataReferences.Materials;

//script must be derived from IComponentScript
public class Script: IPS.Scripting.IComponentScript
{

	//do pre simulation initialisation here
	public override void Initialise()
	{
	}

	//do post simulation cleanup here
	public override void Cleanup()
	{
	}

	//script main execution function - called every cycle
	public override void Execute(double Time)
	{
		double TimeStep = Project.TimeStep;
		SineResult.Value = Math.Sin(Time);
		AbsoluteResult.Value = Math.Abs(Input);
	}

	//any processing you want to do before steady state
	public override void ExecuteBeforeSteadyState()
	{
		Execute(0.0);
	}	

	//any processing you want to do while solving steady state
	public override void ExecuteSteadyState()
	{
		Execute(0.0);
	}	  

	//any processing you want to do after steady state
	public override void ExecuteAfterSteadyState()
	{
		Execute(0.0);
	}	

	//constructer initialises parameters
	public Script()
	{
		_Input = new IPS.Properties.Double();
		_Input.DisplayUnitGroup = IPS.Units.UnitGroup.None;
		_SineResult = new IPS.Properties.Double();
		_SineResult.DisplayUnitGroup = IPS.Units.UnitGroup.None;
		_AbsoluteResult = new IPS.Properties.Double();
		_AbsoluteResult.DisplayUnitGroup = IPS.Units.UnitGroup.None;

	}

	IPS.Properties.Double _Input;
	[GridCategory(new String[]{"Example Inputs"})]
	[GridOrder(1)]
	[DisplayName("Input")]
	[PropertyUsage(UseProperty.DYNAMIC)]
	public IPS.Properties.Double Input
	{
		get
		{
			return _Input;
		}
		set
		{
			Input.Value = value.Value;
		}
	}
	IPS.Properties.Double _SineResult;
	[GridCategory(new String[]{"Example Results"})]
	[GridOrder(2)]
	[DisplayName("Sine result")]
	[PropertyUsage(UseProperty.RESULT)]
	public IPS.Properties.Double SineResult
	{
		get
		{
			return _SineResult;
		}
		set
		{
			SineResult.Value = value.Value;
		}
	}
	IPS.Properties.Double _AbsoluteResult;
	[GridCategory(new String[]{"Example Results"})]
	[GridOrder(3)]
	[DisplayName("Absolute value result")]
	[PropertyUsage(UseProperty.RESULT)]
	public IPS.Properties.Double AbsoluteResult
	{
		get
		{
			return _AbsoluteResult;
		}
		set
		{
			AbsoluteResult.Value = value.Value;
		}
	}

}